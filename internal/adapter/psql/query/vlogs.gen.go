// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"grapefruit/internal/domain/po"
)

func newVlog(db *gorm.DB, opts ...gen.DOOption) vlog {
	_vlog := vlog{}

	_vlog.vlogDo.UseDB(db, opts...)
	_vlog.vlogDo.UseModel(&po.Vlog{})

	tableName := _vlog.vlogDo.TableName()
	_vlog.ALL = field.NewAsterisk(tableName)
	_vlog.ID = field.NewInt64(tableName, "id")
	_vlog.URL = field.NewString(tableName, "url")
	_vlog.Desc = field.NewString(tableName, "desc")
	_vlog.CreatedTime = field.NewString(tableName, "created_time")
	_vlog.UpdateTime = field.NewString(tableName, "update_time")
	_vlog.LikeTimes = field.NewInt64(tableName, "like_times")

	_vlog.fillFieldMap()

	return _vlog
}

type vlog struct {
	vlogDo vlogDo

	ALL         field.Asterisk
	ID          field.Int64
	URL         field.String
	Desc        field.String
	CreatedTime field.String
	UpdateTime  field.String
	LikeTimes   field.Int64

	fieldMap map[string]field.Expr
}

func (v vlog) Table(newTableName string) *vlog {
	v.vlogDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vlog) As(alias string) *vlog {
	v.vlogDo.DO = *(v.vlogDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vlog) updateTableName(table string) *vlog {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.URL = field.NewString(table, "url")
	v.Desc = field.NewString(table, "desc")
	v.CreatedTime = field.NewString(table, "created_time")
	v.UpdateTime = field.NewString(table, "update_time")
	v.LikeTimes = field.NewInt64(table, "like_times")

	v.fillFieldMap()

	return v
}

func (v *vlog) WithContext(ctx context.Context) IVlogDo { return v.vlogDo.WithContext(ctx) }

func (v vlog) TableName() string { return v.vlogDo.TableName() }

func (v vlog) Alias() string { return v.vlogDo.Alias() }

func (v vlog) Columns(cols ...field.Expr) gen.Columns { return v.vlogDo.Columns(cols...) }

func (v *vlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vlog) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["id"] = v.ID
	v.fieldMap["url"] = v.URL
	v.fieldMap["desc"] = v.Desc
	v.fieldMap["created_time"] = v.CreatedTime
	v.fieldMap["update_time"] = v.UpdateTime
	v.fieldMap["like_times"] = v.LikeTimes
}

func (v vlog) clone(db *gorm.DB) vlog {
	v.vlogDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vlog) replaceDB(db *gorm.DB) vlog {
	v.vlogDo.ReplaceDB(db)
	return v
}

type vlogDo struct{ gen.DO }

type IVlogDo interface {
	gen.SubQuery
	Debug() IVlogDo
	WithContext(ctx context.Context) IVlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVlogDo
	WriteDB() IVlogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVlogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVlogDo
	Not(conds ...gen.Condition) IVlogDo
	Or(conds ...gen.Condition) IVlogDo
	Select(conds ...field.Expr) IVlogDo
	Where(conds ...gen.Condition) IVlogDo
	Order(conds ...field.Expr) IVlogDo
	Distinct(cols ...field.Expr) IVlogDo
	Omit(cols ...field.Expr) IVlogDo
	Join(table schema.Tabler, on ...field.Expr) IVlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVlogDo
	Group(cols ...field.Expr) IVlogDo
	Having(conds ...gen.Condition) IVlogDo
	Limit(limit int) IVlogDo
	Offset(offset int) IVlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVlogDo
	Unscoped() IVlogDo
	Create(values ...*po.Vlog) error
	CreateInBatches(values []*po.Vlog, batchSize int) error
	Save(values ...*po.Vlog) error
	First() (*po.Vlog, error)
	Take() (*po.Vlog, error)
	Last() (*po.Vlog, error)
	Find() ([]*po.Vlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.Vlog, err error)
	FindInBatches(result *[]*po.Vlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*po.Vlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVlogDo
	Assign(attrs ...field.AssignExpr) IVlogDo
	Joins(fields ...field.RelationField) IVlogDo
	Preload(fields ...field.RelationField) IVlogDo
	FirstOrInit() (*po.Vlog, error)
	FirstOrCreate() (*po.Vlog, error)
	FindByPage(offset int, limit int) (result []*po.Vlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vlogDo) Debug() IVlogDo {
	return v.withDO(v.DO.Debug())
}

func (v vlogDo) WithContext(ctx context.Context) IVlogDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vlogDo) ReadDB() IVlogDo {
	return v.Clauses(dbresolver.Read)
}

func (v vlogDo) WriteDB() IVlogDo {
	return v.Clauses(dbresolver.Write)
}

func (v vlogDo) Session(config *gorm.Session) IVlogDo {
	return v.withDO(v.DO.Session(config))
}

func (v vlogDo) Clauses(conds ...clause.Expression) IVlogDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vlogDo) Returning(value interface{}, columns ...string) IVlogDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vlogDo) Not(conds ...gen.Condition) IVlogDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vlogDo) Or(conds ...gen.Condition) IVlogDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vlogDo) Select(conds ...field.Expr) IVlogDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vlogDo) Where(conds ...gen.Condition) IVlogDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vlogDo) Order(conds ...field.Expr) IVlogDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vlogDo) Distinct(cols ...field.Expr) IVlogDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vlogDo) Omit(cols ...field.Expr) IVlogDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vlogDo) Join(table schema.Tabler, on ...field.Expr) IVlogDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVlogDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vlogDo) RightJoin(table schema.Tabler, on ...field.Expr) IVlogDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vlogDo) Group(cols ...field.Expr) IVlogDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vlogDo) Having(conds ...gen.Condition) IVlogDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vlogDo) Limit(limit int) IVlogDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vlogDo) Offset(offset int) IVlogDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVlogDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vlogDo) Unscoped() IVlogDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vlogDo) Create(values ...*po.Vlog) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vlogDo) CreateInBatches(values []*po.Vlog, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vlogDo) Save(values ...*po.Vlog) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vlogDo) First() (*po.Vlog, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.Vlog), nil
	}
}

func (v vlogDo) Take() (*po.Vlog, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.Vlog), nil
	}
}

func (v vlogDo) Last() (*po.Vlog, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.Vlog), nil
	}
}

func (v vlogDo) Find() ([]*po.Vlog, error) {
	result, err := v.DO.Find()
	return result.([]*po.Vlog), err
}

func (v vlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.Vlog, err error) {
	buf := make([]*po.Vlog, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vlogDo) FindInBatches(result *[]*po.Vlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vlogDo) Attrs(attrs ...field.AssignExpr) IVlogDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vlogDo) Assign(attrs ...field.AssignExpr) IVlogDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vlogDo) Joins(fields ...field.RelationField) IVlogDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vlogDo) Preload(fields ...field.RelationField) IVlogDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vlogDo) FirstOrInit() (*po.Vlog, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.Vlog), nil
	}
}

func (v vlogDo) FirstOrCreate() (*po.Vlog, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.Vlog), nil
	}
}

func (v vlogDo) FindByPage(offset int, limit int) (result []*po.Vlog, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vlogDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vlogDo) Delete(models ...*po.Vlog) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vlogDo) withDO(do gen.Dao) *vlogDo {
	v.DO = *do.(*gen.DO)
	return v
}
