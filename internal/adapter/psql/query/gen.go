// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q       = new(Query)
	Company *company
	Job     *job
	Photo   *photo
	Project *project
	Resume  *resume
	Token   *token
	User    *user
	Vlog    *vlog
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Company = &Q.Company
	Job = &Q.Job
	Photo = &Q.Photo
	Project = &Q.Project
	Resume = &Q.Resume
	Token = &Q.Token
	User = &Q.User
	Vlog = &Q.Vlog
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:      db,
		Company: newCompany(db, opts...),
		Job:     newJob(db, opts...),
		Photo:   newPhoto(db, opts...),
		Project: newProject(db, opts...),
		Resume:  newResume(db, opts...),
		Token:   newToken(db, opts...),
		User:    newUser(db, opts...),
		Vlog:    newVlog(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Company company
	Job     job
	Photo   photo
	Project project
	Resume  resume
	Token   token
	User    user
	Vlog    vlog
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Company: q.Company.clone(db),
		Job:     q.Job.clone(db),
		Photo:   q.Photo.clone(db),
		Project: q.Project.clone(db),
		Resume:  q.Resume.clone(db),
		Token:   q.Token.clone(db),
		User:    q.User.clone(db),
		Vlog:    q.Vlog.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Company: q.Company.replaceDB(db),
		Job:     q.Job.replaceDB(db),
		Photo:   q.Photo.replaceDB(db),
		Project: q.Project.replaceDB(db),
		Resume:  q.Resume.replaceDB(db),
		Token:   q.Token.replaceDB(db),
		User:    q.User.replaceDB(db),
		Vlog:    q.Vlog.replaceDB(db),
	}
}

type queryCtx struct {
	Company ICompanyDo
	Job     IJobDo
	Photo   IPhotoDo
	Project IProjectDo
	Resume  IResumeDo
	Token   ITokenDo
	User    IUserDo
	Vlog    IVlogDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Company: q.Company.WithContext(ctx),
		Job:     q.Job.WithContext(ctx),
		Photo:   q.Photo.WithContext(ctx),
		Project: q.Project.WithContext(ctx),
		Resume:  q.Resume.WithContext(ctx),
		Token:   q.Token.WithContext(ctx),
		User:    q.User.WithContext(ctx),
		Vlog:    q.Vlog.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
